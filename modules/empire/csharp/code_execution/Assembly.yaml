name: Assembly
authors:
  - name: Anthony Rose
    handle: Cx01N
    link: https://twitter.com/Cx01N_
description: |
  Reflectively Loads the provided .NET assembly into memory and executes
  the Assembly through it's EntryPoint. The user provides all command line values
  for the assembly. This module can only execute the EntryPoint of the assembly and
  no other Assembly methods. Assembly is executed fully in memory without touching
  disk.
software: ''
tactics: [TA0002, TA0005]
techniques: [T1620]
background: false
output_extension: ''
needs_admin: false
opsec_safe: true
language: csharp
min_language_version: ''
options:
  - name: File
    description: Assembly file to execute.
    required: true
    type: file
  - name: Parameters
    description: The command-line parameters to pass to the assembly's EntryPoint.
    required: false
    value: ''
csharp:
  UnsafeCompile: false
  CompatibleDotNetVersions:
    - Net35
    - Net40
  Code: |
    using System;
    using System.IO;
    using System.Linq;
    using System.Collections.Generic;
    using SharpSploit.Execution;

    public static class Program
    {
        public static void Main(string[] args)
        {
            string assembly = args.Length > 0 ? args[0] : "";
            string parameters = args.Length > 1 ? args[1] : "";

            string result = ExecuteAssembly(assembly, parameters);
            Console.WriteLine(result);
        }

        public static string ExecuteAssembly(string assembly, string parameters = "")
        {
            using (StringWriter stringWriter = new StringWriter())
            {
                TextWriter originalOutput = Console.Out;
                TextWriter originalError = Console.Error;
                Console.SetOut(stringWriter);
                Console.SetError(stringWriter);

                try
                {
                    string[] args = SplitCommandLine(parameters).ToArray();
                    Assembly.AssemblyExecute(assembly, new object[] { args });
                }
                catch (Exception ex)
                {
                    stringWriter.WriteLine($"Error: {ex.Message}");
                    if (ex.InnerException != null)
                    {
                        stringWriter.WriteLine($"Inner Exception: {ex.InnerException.GetType().FullName}: {ex.InnerException.Message}");
                    }
                }
                finally
                {
                    Console.SetOut(originalOutput);
                    Console.SetError(originalError);
                }

                return stringWriter.ToString();
            }
        }

        private static IEnumerable<string> SplitCommandLine(string commandLine)
        {
            bool inQuotes = false;

            return commandLine.Split(c =>
            {
                if (c == '\"' || c == '\'')
                    inQuotes = !inQuotes;

                return !inQuotes && c == ' ';
            })
            .Select(arg => arg.Trim().TrimMatchingQuotes('\"').TrimMatchingQuotes('\''))
            .Where(arg => !string.IsNullOrEmpty(arg));
        }

        private static IEnumerable<string> Split(this string str, Func<char, bool> controller)
        {
            int nextPiece = 0;

            for (int c = 0; c < str.Length; c++)
            {
                if (controller(str[c]))
                {
                    yield return str.Substring(nextPiece, c - nextPiece);
                    nextPiece = c + 1;
                }
            }

            yield return str.Substring(nextPiece);
        }

        private static string TrimMatchingQuotes(this string input, char quote)
        {
            if ((input.Length >= 2) &&
                (input[0] == quote) && (input[input.Length - 1] == quote))
            {
                return input.Substring(1, input.Length - 2);
            }
            return input;
        }
    }
  ReferenceSourceLibraries:
    - Name: SharpSploit
      Description: SharpSploit is a library for C# post-exploitation modules.
      Location: SharpSploit\SharpSploit\
      Language: CSharp
      CompatibleDotNetVersions: ''
      ReferenceAssemblies:
        - Name: System.Management.Automation.dll
          Location: net35\System.Management.Automation.dll
          DotNetVersion: Net35
        - Name: System.Management.dll
          Location: net40\System.Management.dll
          DotNetVersion: Net40
        - Name: System.Management.Automation.dll
          Location: net40\System.Management.Automation.dll
          DotNetVersion: Net40
        - Name: System.IdentityModel.dll
          Location: net40\System.IdentityModel.dll
          DotNetVersion: Net40
        - Name: System.dll
          Location: net40\System.dll
          DotNetVersion: Net40
        - Name: System.DirectoryServices.dll
          Location: net40\System.DirectoryServices.dll
          DotNetVersion: Net40
        - Name: System.Core.dll
          Location: net40\System.Core.dll
          DotNetVersion: Net40
        - Name: mscorlib.dll
          Location: net40\mscorlib.dll
          DotNetVersion: Net40
        - Name: System.Management.dll
          Location: net35\System.Management.dll
          DotNetVersion: Net35
        - Name: mscorlib.dll
          Location: net35\mscorlib.dll
          DotNetVersion: Net35
        - Name: System.Core.dll
          Location: net35\System.Core.dll
          DotNetVersion: Net35
        - Name: System.DirectoryServices.dll
          Location: net35\System.DirectoryServices.dll
          DotNetVersion: Net35
        - Name: System.dll
          Location: net35\System.dll
          DotNetVersion: Net35
        - Name: System.IdentityModel.dll
          Location: net35\System.IdentityModel.dll
          DotNetVersion: Net35
      EmbeddedResources: []
  ReferenceAssemblies: []
  EmbeddedResources: []
