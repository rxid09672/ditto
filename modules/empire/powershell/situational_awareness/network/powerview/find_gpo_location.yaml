name: Get-DomainGPOUserLocalGroupMapping
authors:
  - name: Will Schroeder
    handle: '@harmj0y'
    link: https://twitter.com/harmj0y
description: Identifies computers where specific users or groups have been granted
  local administrative access through Group Policy Objects (GPOs), enabling targeted
  lateral movement planning and privilege escalation analysis. This module leverages
  PowerView's Get-DomainGPOUserLocalGroupMapping function to analyze GPO configurations
  and determine which computers in the domain have been configured to grant local
  administrative access to specific users or groups through policy enforcement. The
  reconnaissance capability is essential for understanding policy-based administrative
  access distribution, identifying potential lateral movement targets, and mapping
  the scope of policy-granted administrative privileges across the domain. By analyzing
  GPO user local group mappings, operators can identify specific computers where
  target users have administrative access, understand the distribution of policy-based
  privileges, and discover potential lateral movement paths through policy-granted
  administrative access. The module supports targeting specific users, groups, or
  local groups to focus reconnaissance efforts on particular administrative relationships.
  This information is crucial for lateral movement planning, privilege escalation
  targeting, and understanding the distribution of administrative access across the
  domain through policy-based mechanisms.
software: S0194
tactics: [TA0007]
techniques: [T1069, T1018, T1615]
background: true
output_extension:
needs_admin: false
opsec_safe: true
language: powershell
min_language_version: '2'
comments:
  - https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/
options:
  - name: Agent
    description: Agent to run module on.
    required: true
    value: ''
  - name: Identity
    description: A SamAccountName, DistinguishedName, SID, GUID, or a dns host name
      for the user/group to identify GPO local group mappings for.
    required: false
    value: ''
  - name: LocalGroup
    description: The local group to check access against
    required: false
    value: ''
  - name: Domain
    description: The domain to use for the query, defaults to the current domain.
    required: false
    value: ''
  - name: SearchBase
    description: The LDAP source to search through, e.g. "LDAP://OU=secret,DC=testlab,DC=local"
      Useful for OU queries.
    required: false
    value: ''
  - name: Server
    description: Specifies an active directory server (domain controller) to bind
      to
    required: false
    value: ''
  - name: SearchScope
    description: Specifies the scope to search under, Base/OneLevel/Subtree (default
      of Subtree)
    required: false
    value: ''
  - name: ResultPageSize
    description: Specifies the PageSize to set for the LDAP searcher object.
    required: false
    value: ''
  - name: ServerTimeLimit
    description: Specifies the maximum amount of time the server spends searching.
      Default of 120 seconds.
    required: false
    value: ''
  - name: Tombstone
    description: Specifies that the search should also return deleted/tombstoned
      objects.
    required: false
    value: 'False'
    strict: true
    suggested_values:
      - True
      - False
  - name: OutputFunction
    description: PowerShell's output function to use ("Out-String", "ConvertTo-Json",
      "ConvertTo-Csv", "ConvertTo-Html", "ConvertTo-Xml").
    required: false
    value: Out-String
    strict: false
    suggested_values:
      - Out-String
      - ConvertTo-Json
      - ConvertTo-Csv
      - ConvertTo-Html
      - ConvertTo-Xml
script_path: situational_awareness/network/powerview.ps1
script_end: Get-DomainGPOUserLocalGroupMapping {{ PARAMS }} | {{ OUTPUT_FUNCTION
  }} | %{$_ + "`n"}; 'Get-DomainGPOUserLocalGroupMapping completed'
