name: Get Users
authors:
  - name: ''
    handle: '@424f424f'
    link: https://twitter.com/424f424f
description: |
  An Active Directory enumeration module that retrieves a comprehensive list
  of all user accounts within the target domain. This module performs essential
  reconnaissance to identify potential targets for credential harvesting and
  social engineering attacks.

  The module queries Active Directory via LDAP to extract all user accounts
  while filtering out computer accounts and service accounts. This information
  is essential for understanding the domain's user population and identifying
  potential targets for privilege escalation and lateral movement.

  The enumeration results provide critical intelligence for user targeting
  and social engineering by revealing the complete user base within the domain.
  This module is fundamental for domain reconnaissance and helps operators
  identify potential targets for credential harvesting, privilege escalation,
  and targeted attacks based on user roles and organizational structure.
software: ''
tactics: []
techniques:
  - T1482
background: false
output_extension: ''
needs_admin: false
opsec_safe: true
language: python
min_language_version: '2.6'
comments:
  - ''
options:
  - name: Agent
    description: Agent to grab run on.
    required: true
    value: ''
  - name: LDAPAddress
    description: LDAP IP/Hostname
    required: true
    value: ''
  - name: BindDN
    description: user@penlab.local
    required: true
    value: ''
  - name: Password
    description: Password to connect to LDAP
    required: false
    value: ''
script: |-
  import sys, os, subprocess, re
  BindDN = "{{ BindDN }}"
  LDAPAddress = "{{ LDAPAddress }}"
  password = "{{ Password }}"

  regex = re.compile('.+@([^.]+)\..+')
  global tld
  match = re.match(regex, BindDN)
  tld = match.group(1)
  global ext
  ext = BindDN.split('.')[1]

  cmd = \"""ldapsearch -x -h {} -b "dc={},dc={}" -D {} -w {} "objectclass=user" sAMAccountName""\".format(LDAPAddress, tld, ext, BindDN, password)
  output = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, bufsize=1)
  with output.stdout:
      print("")
      for line in iter(output.stdout.readline, b''):
          if ("sAMAccountName:") in line:
              if '$' not in line:
                  m = re.search(r'[^sAMAccountName:].*$', line)
                  print(m.group(0).lstrip())
  output.wait()
  print("")
