name: Get Groups
authors:
  - name: ''
    handle: '@424f424f'
    link: https://twitter.com/424f424f
description: |
  An Active Directory enumeration module that retrieves a comprehensive list
  of all groups within the target domain. This module performs essential
  reconnaissance to understand organizational structure and privilege
  distribution through group analysis.

  The module queries Active Directory via LDAP to extract all group objects
  including security groups, distribution groups, and built-in groups. This
  information is essential for understanding the domain's access control
  structure and identifying high-value groups for privilege escalation.

  The enumeration results provide critical intelligence for privilege escalation
  and lateral movement by revealing the complete group structure within the
  domain. This module is fundamental for domain reconnaissance and helps
  operators identify potential targets for group-based attacks and understand
  the organizational hierarchy for targeted social engineering campaigns.
software: ''
tactics: []
techniques:
  - T1482
background: false
output_extension: ''
needs_admin: false
opsec_safe: true
language: python
min_language_version: '2.6'
comments:
  - ''
options:
  - name: Agent
    description: Agent to grab run on.
    required: true
    value: ''
  - name: LDAPAddress
    description: LDAP IP/Hostname
    required: true
    value: ''
  - name: BindDN
    description: user@penlab.local
    required: true
    value: ''
  - name: Password
    description: Password to connect to LDAP
    required: false
    value: ''
script: |
  import sys, os, subprocess, re
  BindDN = "{{ BindDN }}"
  LDAPAddress = "{{ LDAPAddress }}"
  password = "{{ Password }}"

  regex = re.compile('.+@([^.]+)\..+')
  global tld
  match = re.match(regex, BindDN)
  tld = match.group(1)
  global ext
  ext = BindDN.split('.')[1]


  cmd = \"""ldapsearch -x -h {} -b "dc={},dc={}" -D {} -w {} "(objectcategory=group)" ""\".format(LDAPAddress, tld, ext, BindDN, password)
  output = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
  output2 = subprocess.Popen(["grep", "name:"],stdin=output.stdout, stdout=subprocess.PIPE,universal_newlines=True)
  output.stdout.close()
  out,err = output2.communicate()
  print("")
  print(out)
