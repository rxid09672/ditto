name: Invoke-LockWorkStation
authors:
  - name: Will Schroeder
    handle: '@harmj0y'
    link: https://twitter.com/harmj0y
description: |
  A PowerShell module that programmatically locks the workstation
  display using Windows API calls. This module leverages the
  User32.dll LockWorkStation function to immediately secure the
  desktop and require user authentication to regain access.

  The module uses dynamic assembly creation and P/Invoke techniques
  to call the native Windows API function, bypassing the need for
  direct DLL imports. This approach provides a clean method for
  remotely locking workstations during security operations or
  incident response scenarios.

  This functionality is particularly useful for security operations
  where immediate workstation lockdown is required, such as during
  incident response, security breaches, or when unauthorized access
  is detected. The module can be executed remotely to secure
  multiple workstations simultaneously without requiring physical
  access to each machine.
software: ''
tactics: [TA0040]
techniques: [T1531]
background: false
output_extension:
needs_admin: false
opsec_safe: false
language: powershell
min_language_version: '2'
comments:
  - http://poshcode.org/1640
options:
  - name: Agent
    description: Agent to run module on.
    required: true
    value: ''
script: |
  Function Invoke-LockWorkStation {
      # region define P/Invoke types dynamically
      #   stolen from PowerSploit https://github.com/mattifestation/PowerSploit/blob/master/Mayhem/Mayhem.psm1
      #   thanks matt and chris :)
      $DynAssembly = New-Object System.Reflection.AssemblyName('Win32')
      $AssemblyBuilder = [AppDomain]::CurrentDomain.DefineDynamicAssembly($DynAssembly, [Reflection.Emit.AssemblyBuilderAccess]::Run)
      $ModuleBuilder = $AssemblyBuilder.DefineDynamicModule('Win32', $False)

      $TypeBuilder = $ModuleBuilder.DefineType('Win32.User32', 'Public, Class')
      $DllImportConstructor = [Runtime.InteropServices.DllImportAttribute].GetConstructor(@([String]))
      $SetLastError = [Runtime.InteropServices.DllImportAttribute].GetField('SetLastError')
      $SetLastErrorCustomAttribute = New-Object Reflection.Emit.CustomAttributeBuilder($DllImportConstructor,
          @('User32.dll'),
          [Reflection.FieldInfo[]]@($SetLastError),
          @($True))

      # Define [Win32.User32]::LockWorkStation()
      $PInvokeMethod = $TypeBuilder.DefinePInvokeMethod('LockWorkStation',
          'User32.dll',
          ([Reflection.MethodAttributes]::Public -bor [Reflection.MethodAttributes]::Static),
          [Reflection.CallingConventions]::Standard,
          [Bool],
          [Type[]]@(),
          [Runtime.InteropServices.CallingConvention]::Winapi,
          [Runtime.InteropServices.CharSet]::Ansi)
      $PInvokeMethod.SetCustomAttribute($SetLastErrorCustomAttribute)

      $User32 = $TypeBuilder.CreateType()

      $Null = $User32::LockWorkStation()
      Write-Host "Workstation locked"
  }
script_end: Invoke-LockWorkStation
