name: Find-ProcessDLLHijack
authors:
  - name: Will Schroeder
    handle: '@harmj0y'
    link: https://twitter.com/harmj0y
description: |
  A privilege escalation enumeration module that identifies potential
  DLL hijacking opportunities on Windows systems. This module scans
  running processes and their DLL dependencies to find situations
  where malicious DLLs could be placed to achieve privilege escalation.

  The module examines the DLL search order and file permissions to
  identify processes that load DLLs from writable directories or
  locations where an attacker could place malicious DLLs. It looks
  for common DLL hijacking scenarios such as missing DLLs in expected
  locations, writable directories in the DLL search path, and weak
  file permissions that allow DLL replacement.

  This technique is particularly effective for privilege escalation
  because it can allow an attacker to execute code in the context
  of higher-privileged processes. The module provides detailed
  information about each potential hijacking opportunity, including
  the target process, missing DLL, and the location where a malicious
  DLL could be placed.
software: S0194
tactics: [TA0007]
techniques: [T1087.001, T1574.001, T1574.007, T1574.008, T1574.009, T1057, T1012,
  T1068, T1082]
background: true
output_extension:
needs_admin: false
opsec_safe: true
language: powershell
min_language_version: '2'
comments:
  - https://github.com/PowerShellEmpire/PowerTools/tree/master/PowerUp
options:
  - name: Agent
    description: Agent to run module on.
    required: true
    value: ''
  - name: ExcludeWindows
    description: Switch. Exclude paths from C:\Windows\* instead of just C:\Windows\System32\*
    required: false
    value: ''
  - name: ExcludeProgramFiles
    description: Switch. Exclude paths from C:\Program Files\* and C:\Program Files
      (x86)\*
    required: false
    value: ''
  - name: ExcludeOwned
    description: Switch. Exclude processes the current user owns.
    required: false
    value: ''
  - name: OutputFunction
    description: PowerShell's output function to use ("Out-String", "ConvertTo-Json",
      "ConvertTo-Csv", "ConvertTo-Html", "ConvertTo-Xml").
    required: false
    value: Out-String
    strict: false
    suggested_values:
      - Out-String
      - ConvertTo-Json
      - ConvertTo-Csv
      - ConvertTo-Html
      - ConvertTo-Xml
script_path: privesc/PowerUp.ps1
script_end: Find-ProcessDLLHijack {{ PARAMS }} | ft -wrap | {{ OUTPUT_FUNCTION }}
  | %{$_ + "`n"}; 'Find-ProcessDLLHijack completed'
